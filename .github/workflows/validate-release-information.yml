name: Validate Release Information

on:
  pull_request:
    types:
      - opened
      - reopened
      - ready_for_review
      - edited

permissions:
  contents: read
  pull-requests: write

jobs:
  release-info:
    runs-on: ubuntu-latest
    env:
      PR_DESCRIPTION: ${{ github.event.pull_request.body }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v2
      - run: echo $PR_DESCRIPTION
      - name: Set release type label
        run: |
          RELEASE_TYPE=$(echo "$PR_DESCRIPTION" | grep -oP '(?<=/release )\b(major|minor|patch|none)\b' | head -n 1)
          if [[ $(echo "$RELEASE_TYPE" | wc -l) -gt 1 || -z $RELEASE_TYPE ]]; then
            echo "Invalid release type. Please use /release <major|minor|patch|none> in the PR description."
            exit 1
          fi
          RELEASE_LABEL="release/${RELEASE_TYPE}"
          OLD_LABEL=$(gh pr view ${{ github.event.number }} --json labels --jq '.labels[].name' | grep -E '^(release)/' || true)
          [[ $RELEASE_LABEL != $OLD_LABEL ]] && gh issue edit ${{ github.event.number }} --add-label "${RELEASE_LABEL}" --remove-label "${OLD_LABEL}"
          echo RELEASE_LABEL=$RELEASE_LABEL >> $GITHUB_ENV
      - name: Check release note
        run: echo ${{ env.RELEASE_LABEL }}
