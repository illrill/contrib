name: Validate Release Information

on:
  pull_request:
    types:
      - opened
      - reopened
      - ready_for_review
      - edited

permissions:
  contents: read
  pull-requests: write

jobs:
  release-info:
    runs-on: ubuntu-latest
    env:
      PR_DESCRIPTION: ${{ github.event.pull_request.body }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v2
      - run: echo $PR_DESCRIPTION
      - name: Set release type label
        run: |
          REGEX="^\/release (major|minor|patch|none)$"
          RELEASE_LABEL=""
          while IFS= read -r l; do
            l=$(echo "$l" | xargs) # Trim leading and trailing spaces
            if [[ $l =~ $REGEX ]]; then
              RELEASE_LABEL="release/${BASH_REMATCH[1]}"
              echo "Detected release type: $RELEASE_LABEL"
              break
            fi
          done <<< "$PR_DESCRIPTION"
          if [[ -n $RELEASE_LABEL ]]; then
            OLD=$(gh pr view ${{ github.event.number }} --json labels --jq '.labels[].name' | grep -E '^(release)/' || true)
            if [[ $RELEASE_LABEL != $OLD ]]; then
              DEL=${OLD[@]/$RELEASE_LABEL} && DEL=$(echo $DEL | tr ' ' ,)
              gh issue edit ${{ github.event.number }} --add-label "${RELEASE_LABEL}" --remove-label "${DEL}"
            fi
            echo RELEASE_LABEL=$RELEASE_LABEL >> $GITHUB_ENV
          else
            echo "No release type detected. Please use /release <major|minor|patch|none> in the PR description."
            exit 1
          fi
      - name: Check release note
        run: echo ${{ env.RELEASE_LABEL }}
